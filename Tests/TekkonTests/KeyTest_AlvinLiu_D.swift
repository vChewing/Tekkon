// (c) 2022 and onwards The vChewing Project (LGPL v3.0 License or later).
// ====================
// This code is released under the SPDX-License-Identifier: `LGPL-3.0-or-later`.

import XCTest

@testable import Tekkon

extension TekkonTestsKeyboardArrangments {
  func testAlvinLiuKeysMicrosoftCompatible() throws {
    var c = Tekkon.Composer(arrange: .ofAlvinLiu)
    var counter = 0
    Self.checkEq(&counter, &c, "bic", "ㄅㄧㄝ")
    Self.checkEq(&counter, &c, "bicf", "ㄅㄧㄝˊ")
    Self.checkEq(&counter, &c, "bicj", "ㄅㄧㄝˇ")
    Self.checkEq(&counter, &c, "bicl", "ㄅㄧㄝˋ")
    Self.checkEq(&counter, &c, "pic", "ㄆㄧㄝ")
    Self.checkEq(&counter, &c, "picj", "ㄆㄧㄝˇ")
    Self.checkEq(&counter, &c, "picl", "ㄆㄧㄝˋ")
    Self.checkEq(&counter, &c, "mic", "ㄇㄧㄝ")
    Self.checkEq(&counter, &c, "micf", "ㄇㄧㄝˊ")
    Self.checkEq(&counter, &c, "micl", "ㄇㄧㄝˋ")
    Self.checkEq(&counter, &c, "dic", "ㄉㄧㄝ")
    Self.checkEq(&counter, &c, "dicf", "ㄉㄧㄝˊ")
    Self.checkEq(&counter, &c, "dicj", "ㄉㄧㄝˇ")
    Self.checkEq(&counter, &c, "dicl", "ㄉㄧㄝˋ")
    Self.checkEq(&counter, &c, "tic", "ㄊㄧㄝ")
    Self.checkEq(&counter, &c, "ticf", "ㄊㄧㄝˊ")
    Self.checkEq(&counter, &c, "ticj", "ㄊㄧㄝˇ")
    Self.checkEq(&counter, &c, "ticl", "ㄊㄧㄝˋ")
    Self.checkEq(&counter, &c, "nic", "ㄋㄧㄝ")
    Self.checkEq(&counter, &c, "nicf", "ㄋㄧㄝˊ")
    Self.checkEq(&counter, &c, "nicl", "ㄋㄧㄝˋ")
    Self.checkEq(&counter, &c, "nycl", "ㄋㄩㄝˋ")
    Self.checkEq(&counter, &c, "lic", "ㄌㄧㄝ")
    Self.checkEq(&counter, &c, "licf", "ㄌㄧㄝˊ")
    Self.checkEq(&counter, &c, "licj", "ㄌㄧㄝˇ")
    Self.checkEq(&counter, &c, "licl", "ㄌㄧㄝˋ")
    Self.checkEq(&counter, &c, "lyc", "ㄌㄩㄝ")
    Self.checkEq(&counter, &c, "lycj", "ㄌㄩㄝˇ")
    Self.checkEq(&counter, &c, "lycl", "ㄌㄩㄝˋ")
    Self.checkEq(&counter, &c, "jic", "ㄐㄧㄝ")
    Self.checkEq(&counter, &c, "jicf", "ㄐㄧㄝˊ")
    Self.checkEq(&counter, &c, "jicj", "ㄐㄧㄝˇ")
    Self.checkEq(&counter, &c, "jicl", "ㄐㄧㄝˋ")
    Self.checkEq(&counter, &c, "jicd", "ㄐㄧㄝ˙")
    Self.checkEq(&counter, &c, "jyc", "ㄐㄩㄝ")
    Self.checkEq(&counter, &c, "jycf", "ㄐㄩㄝˊ")
    Self.checkEq(&counter, &c, "jycj", "ㄐㄩㄝˇ")
    Self.checkEq(&counter, &c, "jycl", "ㄐㄩㄝˋ")
    Self.checkEq(&counter, &c, "qic", "ㄑㄧㄝ")
    Self.checkEq(&counter, &c, "qicf", "ㄑㄧㄝˊ")
    Self.checkEq(&counter, &c, "qicj", "ㄑㄧㄝˇ")
    Self.checkEq(&counter, &c, "qicl", "ㄑㄧㄝˋ")
    Self.checkEq(&counter, &c, "qyc", "ㄑㄩㄝ")
    Self.checkEq(&counter, &c, "qycf", "ㄑㄩㄝˊ")
    Self.checkEq(&counter, &c, "qycl", "ㄑㄩㄝˋ")
    Self.checkEq(&counter, &c, "xic", "ㄒㄧㄝ")
    Self.checkEq(&counter, &c, "xicf", "ㄒㄧㄝˊ")
    Self.checkEq(&counter, &c, "xicj", "ㄒㄧㄝˇ")
    Self.checkEq(&counter, &c, "xicl", "ㄒㄧㄝˋ")
    Self.checkEq(&counter, &c, "xyc", "ㄒㄩㄝ")
    Self.checkEq(&counter, &c, "xycf", "ㄒㄩㄝˊ")
    Self.checkEq(&counter, &c, "xycj", "ㄒㄩㄝˇ")
    Self.checkEq(&counter, &c, "xycl", "ㄒㄩㄝˋ")
    // Self.checkEq(&counter, &c, "cf", "ㄝˊ")
    // Self.checkEq(&counter, &c, "cj", "ㄝˇ")
    // Self.checkEq(&counter, &c, "cl", "ㄝˋ")
    // Self.checkEq(&counter, &c, "cd", "ㄝ˙")
    Self.checkEq(&counter, &c, "h ", "ㄞ ")
    Self.checkEq(&counter, &c, "t ", "ㄦ ")
    Self.checkEq(&counter, &c, "tf", "ㄦˊ")
    Self.checkEq(&counter, &c, "tj", "ㄦˇ")
    Self.checkEq(&counter, &c, "tl", "ㄦˋ")
    Self.checkEq(&counter, &c, "td", "ㄦ˙")
    Self.checkEq(&counter, &c, "ic", "ㄧㄝ")
    Self.checkEq(&counter, &c, "icf", "ㄧㄝˊ")
    Self.checkEq(&counter, &c, "icj", "ㄧㄝˇ")
    Self.checkEq(&counter, &c, "icl", "ㄧㄝˋ")
    Self.checkEq(&counter, &c, "icd", "ㄧㄝ˙")
    Self.checkEq(&counter, &c, "yc", "ㄩㄝ")
    Self.checkEq(&counter, &c, "ycj", "ㄩㄝˇ")
    Self.checkEq(&counter, &c, "ycl", "ㄩㄝˋ")
    XCTAssertEqual(counter, 0)
  }
}
